name: Reusable Sync Template

on:
  workflow_call:
    inputs:
      repo:
        description: 'Repository to sync (e.g., minio/minio)'
        required: true
        type: string
      sync_type:
        description: 'Type of sync (release, tag, or dockerhub)'
        required: true
        type: string
      source_images:
        description: 'YAML list of source images'
        required: false
        type: string
        default: '[]'
      dockerfile:
        description: 'Dockerfile content (use {VERSION} placeholder)'
        required: false
        type: string
        default: ''
      target_image:
        description: 'Target image name (for build_and_push)'
        required: false
        type: string
        default: ''
      version_transform:
        description: 'Python script to transform version (or "none")'
        required: false
        type: string
        default: 'none'
      tag_prefix:
        description: 'Tag prefix for DockerHub sync (optional)'
        required: false
        type: string
        default: ''

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '.github/scripts/requirements.txt'

      - name: Install Python dependencies
        run: |
          pip install -r .github/scripts/requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Install GitHub CLI
        run: |
          type -p gh >/dev/null || (
            sudo mkdir -p -m 755 /etc/apt/keyrings &&
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null &&
            sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg &&
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null &&
            sudo apt update &&
            sudo apt install gh -y
          )

      - name: Convert YAML inputs to JSON
        id: convert
        run: |
          # Convert source_images YAML to JSON using Python
          cat > /tmp/convert_yaml.py << 'PYTHON_SCRIPT'
          import json
          import sys
          import os

          source_images_yaml = os.getenv('SOURCE_IMAGES_INPUT', '')

          if not source_images_yaml or source_images_yaml.strip() == '[]':
              source_images_json = '[]'
          else:
              try:
                  import yaml
                  parsed = yaml.safe_load(source_images_yaml)
                  source_images_json = json.dumps(parsed or [])
              except Exception as e:
                  print(f"Error parsing YAML: {e}", file=sys.stderr)
                  print(f"YAML content: {repr(source_images_yaml)}", file=sys.stderr)
                  source_images_json = '[]'

          # Convert version_transform to JSON string
          transform_input = os.getenv('VERSION_TRANSFORM_INPUT', 'none')

          if not transform_input or transform_input == 'none':
              version_transform_json = '"none"'
          else:
              version_transform_json = json.dumps(transform_input)

          print(f"source_images_json={source_images_json}")
          print(f"version_transform_json={version_transform_json}")
          PYTHON_SCRIPT

          SOURCE_IMAGES_INPUT='${{ inputs.source_images }}' \
          VERSION_TRANSFORM_INPUT='${{ inputs.version_transform }}' \
          python3 /tmp/convert_yaml.py >> $GITHUB_OUTPUT

      - name: Sync project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIO_URL: ${{ secrets.MINIO_URL }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_REGISTRY_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          DOCKER_REGISTRY_NAMESPACE: ${{ secrets.DOCKER_REGISTRY_NAMESPACE }}
        run: |
          python .github/scripts/sync_project.py \
            --repo "${{ inputs.repo }}" \
            --sync-type "${{ inputs.sync_type }}" \
            --source-images '${{ steps.convert.outputs.source_images_json }}' \
            --version-transform '${{ steps.convert.outputs.version_transform_json }}' \
            ${{ inputs.dockerfile && format('--dockerfile "{0}"', inputs.dockerfile) || '' }} \
            ${{ inputs.target_image && format('--target-image "{0}"', inputs.target_image) || '' }} \
            ${{ inputs.tag_prefix && format('--tag-prefix "{0}"', inputs.tag_prefix) || '' }}

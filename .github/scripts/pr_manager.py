"""GitHub Pull Request management for version updates."""

from github import Github, GithubException
from typing import Optional
import logging
import subprocess

logger = logging.getLogger(__name__)


class PRManager:
    """Manage GitHub Pull Requests for version updates."""

    def __init__(self, token: str, repo_full_name: str):
        """Initialize PR manager.

        Args:
            token: GitHub personal access token
            repo_full_name: Repository in format 'owner/repo'
        """
        self.gh = Github(token)
        self.repo = self.gh.get_repo(repo_full_name)
        self.repo_full_name = repo_full_name
        logger.info(f"Initialized PR manager for {repo_full_name}")

    def has_changes(self) -> bool:
        """Check if there are uncommitted changes in the repository.

        Returns:
            True if there are changes, False otherwise
        """
        try:
            result = subprocess.run(
                ["git", "status", "--porcelain"],
                capture_output=True,
                text=True,
                check=True
            )
            has_changes = bool(result.stdout.strip())
            logger.info(f"Repository has changes: {has_changes}")
            return has_changes
        except subprocess.CalledProcessError as e:
            logger.error(f"Error checking git status: {e}")
            raise

    def create_and_merge_pr(
        self,
        project_name: str,
        new_version: str,
        base_branch: str = "master"
    ) -> Optional[str]:
        """Create a PR with version changes and enable auto-merge.

        Args:
            project_name: Name of the project being updated
            new_version: New version number
            base_branch: Base branch for the PR (default: master)

        Returns:
            PR URL if created, None if no changes

        Raises:
            subprocess.CalledProcessError: If git operations fail
            GithubException: If GitHub API operations fail
        """
        if not self.has_changes():
            logger.info("No changes to commit, skipping PR creation")
            return None

        branch_name = f"update-{project_name.replace('/', '-')}-{new_version}"
        pr_title = f"Update {project_name} to {new_version}"
        pr_body = f"""## Version Update

**Project:** {project_name}
**New Version:** {new_version}

This PR was automatically generated by the release sync workflow.

---
*Auto-generated by GitHub Actions*
"""

        try:
            # Configure git
            subprocess.run(
                ["git", "config", "user.name", "github-actions[bot]"],
                check=True
            )
            subprocess.run(
                ["git", "config", "user.email", "github-actions[bot]@users.noreply.github.com"],
                check=True
            )

            # Delete remote branch if it exists
            logger.info(f"Checking if remote branch {branch_name} exists")
            result = subprocess.run(
                ["git", "ls-remote", "--heads", "origin", branch_name],
                capture_output=True,
                text=True
            )
            if result.stdout.strip():
                logger.info(f"Remote branch {branch_name} exists, deleting it")
                subprocess.run(
                    ["git", "push", "origin", "--delete", branch_name],
                    check=False  # Don't fail if branch doesn't exist
                )

            # Delete local branch if it exists
            subprocess.run(
                ["git", "branch", "-D", branch_name],
                check=False,  # Don't fail if branch doesn't exist
                capture_output=True
            )

            # Create and checkout new branch
            logger.info(f"Creating branch {branch_name}")
            subprocess.run(["git", "checkout", "-b", branch_name], check=True)

            # Stage only version file changes (not __pycache__ or other artifacts)
            subprocess.run(["git", "add", "release-versions/"], check=True)

            # Commit changes
            logger.info("Committing changes")
            subprocess.run(
                ["git", "commit", "-m", pr_title],
                check=True
            )

            # Push branch
            logger.info(f"Pushing branch {branch_name}")
            subprocess.run(
                ["git", "push", "-u", "origin", branch_name],
                check=True
            )

            # Close existing PR if it exists
            try:
                logger.info(f"Checking for existing PR from branch {branch_name}")
                existing_prs = self.repo.get_pulls(
                    state='open',
                    head=f"{self.repo.owner.login}:{branch_name}",
                    base=base_branch
                )
                for pr in existing_prs:
                    logger.info(f"Closing existing PR #{pr.number}")
                    pr.edit(state='closed')
            except GithubException as e:
                logger.warning(f"Error checking for existing PRs: {e}")

            # Create PR using PyGithub
            logger.info("Creating pull request")
            pr = self.repo.create_pull(
                title=pr_title,
                body=pr_body,
                head=branch_name,
                base=base_branch
            )

            logger.info(f"Created PR #{pr.number}: {pr.html_url}")

            # Enable auto-merge using gh CLI (PyGithub doesn't support this yet)
            try:
                logger.info("Enabling auto-merge")
                subprocess.run(
                    [
                        "gh", "pr", "merge", str(pr.number),
                        "--auto", "--squash",
                        "--repo", self.repo_full_name
                    ],
                    check=True,
                    capture_output=True,
                    text=True
                )
                logger.info("Auto-merge enabled")
            except subprocess.CalledProcessError as e:
                logger.warning(f"Failed to enable auto-merge: {e.stderr}")
                logger.info("PR created but auto-merge not enabled")

            return pr.html_url

        except subprocess.CalledProcessError as e:
            logger.error(f"Git operation failed: {e}")
            raise
        except GithubException as e:
            logger.error(f"GitHub API operation failed: {e}")
            raise
